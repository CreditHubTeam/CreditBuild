generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  username             String?                @db.VarChar(64)
  credit_score         Int                    @default(300)
  education_points     BigInt                 @default(0)
  financial_points     BigInt                 @default(0)
  kyc_status           String                 @default("pending") @db.VarChar(32)
  last_activity        DateTime               @default(now())
  moca_id              String?                @unique @db.VarChar(128)
  referral_code        String?                @unique @db.VarChar(16)
  registered_at        DateTime               @default(now())
  reputation_score     Int                    @default(0)
  social_points        BigInt                 @default(0)
  streak_days          Int                    @default(0)
  tier_level           String                 @default("bronze") @db.VarChar(32)
  total_challenges     Int                    @default(0)
  total_points         BigInt                 @default(0)
  wallet_address       String                 @unique @db.VarChar(66)
  createdChallenges    Challenge[]            @relation("ChallengeCreator")
  enhancedPointLedgers EnhancedPointLedger[]
  fanClubMemberships   FanClubMembership[]
  kols                 Kol[]
  pointLedgers         PointLedger[]
  verifiedSocialTasks  SocialTaskCompletion[] @relation("SocialTaskVerifier")
  achievements         UserAchievement[]
  attempts             UserChallenge[]
  UserEducation        UserEducation[]
}

model Kol {
  id                  Int          @id @default(autoincrement())
  userId              Int
  kol_name            String       @db.VarChar(128)
  verification_status String       @default("pending") @db.VarChar(32)
  social_followers    Json
  specialization      String       @db.VarChar(64)
  commission_rate     Decimal      @default(10.00) @db.Decimal(5, 2)
  total_earnings      BigInt       @default(0)
  created_at          DateTime     @default(now())
  fanClubs            FanClub[]
  user                User         @relation(fields: [userId], references: [id])
  earnings            KolEarning[]
}

model FanClub {
  id                   Int                   @id @default(autoincrement())
  kolId                Int
  club_name            String                @db.VarChar(128)
  description          String?
  entry_requirements   Json
  membership_fee       BigInt                @default(0)
  max_members          Int
  current_members      Int                   @default(0)
  club_image           String?               @db.VarChar(255)
  contract_address     String?               @db.VarChar(66)
  created_at           DateTime              @default(now())
  challenges           Challenge[]
  enhancedPointLedgers EnhancedPointLedger[]
  kol                  Kol                   @relation(fields: [kolId], references: [id])
  memberships          FanClubMembership[]
  kolEarnings          KolEarning[]
}

model FanClubMembership {
  id                    Int      @id @default(autoincrement())
  userId                Int
  clubId                Int
  membership_tier       String   @default("basic") @db.VarChar(32)
  joined_at             DateTime @default(now())
  last_activity         DateTime @default(now())
  total_tasks_completed Int      @default(0)
  tier_points           BigInt   @default(0)
  club                  FanClub  @relation(fields: [clubId], references: [id])
  user                  User     @relation(fields: [userId], references: [id])
}

model Challenge {
  id                   Int                   @id @default(autoincrement())
  type                 String                @db.VarChar(64)
  name                 String                @db.VarChar(128)
  description          String?
  points               Int
  creditImpact         Int
  category             String?               @db.VarChar(64)
  rules                Json
  icon                 String?               @db.VarChar(8)
  createdAt            DateTime              @default(now())
  creatorId            Int?
  difficultyLevel      String                @default("beginner") @db.VarChar(32)
  endDate              DateTime?
  estimatedTimeMinutes Int?
  fanClubId            Int?
  featured             Boolean               @default(false)
  isRecurring          Boolean               @default(false)
  maxCompletions       Int?
  recurrencePattern    String?               @db.VarChar(64)
  socialImpact         Int                   @default(0)
  startDate            DateTime?
  verificationMethod   String?               @db.VarChar(64)
  creator              User?                 @relation("ChallengeCreator", fields: [creatorId], references: [id])
  fanClub              FanClub?              @relation(fields: [fanClubId], references: [id])
  enhancedPointLedgers EnhancedPointLedger[]
  socialTasks          SocialTask[]
  attempts             UserChallenge[]
}

model SocialTask {
  id                     Int                    @id @default(autoincrement())
  challengeId            Int
  platform               String                 @db.VarChar(32)
  action_type            String                 @db.VarChar(64)
  content_requirements   Json
  hashtags_required      String[]
  mention_requirements   String[]
  min_engagement_metrics Json
  verification_webhook   String?                @db.VarChar(255)
  auto_verification      Boolean                @default(false)
  challenge              Challenge              @relation(fields: [challengeId], references: [id])
  completions            SocialTaskCompletion[]
}

model SocialTaskCompletion {
  id                 Int           @id @default(autoincrement())
  userChallengeId    Int
  socialTaskId       Int
  platformPostId     String        @db.VarChar(128)
  postUrl            String        @db.VarChar(512)
  engagementMetrics  Json
  verificationStatus String        @default("pending") @db.VarChar(32)
  verifiedAt         DateTime?
  verifiedById       Int?
  socialTask         SocialTask    @relation(fields: [socialTaskId], references: [id])
  userChallenge      UserChallenge @relation(fields: [userChallengeId], references: [id])
  verifiedBy         User?         @relation("SocialTaskVerifier", fields: [verifiedById], references: [id])
}

model EnhancedPointLedger {
  id                  Int        @id @default(autoincrement())
  userId              Int
  pointsDelta         BigInt
  pointCategory       String?    @db.VarChar(32)
  reason              String?    @db.VarChar(128)
  source              String?    @db.VarChar(64)
  challengeId         Int?
  fanClubId           Int?
  multiplier          Decimal    @default(1.00) @db.Decimal(5, 2)
  txHash              String?    @db.VarChar(128)
  mocaTokenEquivalent BigInt?
  createdAt           DateTime   @default(now())
  challenge           Challenge? @relation(fields: [challengeId], references: [id])
  fanClub             FanClub?   @relation(fields: [fanClubId], references: [id])
  user                User       @relation(fields: [userId], references: [id])
}

model KolEarning {
  id              Int      @id @default(autoincrement())
  kolId           Int
  fanClubId       Int
  revenueSource   String   @db.VarChar(64)
  amount          BigInt
  currency        String   @db.VarChar(16)
  transactionHash String?  @db.VarChar(128)
  createdAt       DateTime @default(now())
  fanClub         FanClub  @relation(fields: [fanClubId], references: [id])
  kol             Kol      @relation(fields: [kolId], references: [id])
}

model UserChallenge {
  id                    Int                    @id @default(autoincrement())
  userId                Int
  challengeId           Int
  amount                Decimal?
  status                AttemptStatus          @default(PENDING)
  proof                 Json?
  pointsAwarded         Int                    @default(0)
  creditChange          Int                    @default(0)
  txHash                String?                @db.VarChar(128)
  completionKey         String?                @unique
  createdAt             DateTime               @default(now())
  socialTaskCompletions SocialTaskCompletion[]
  challenge             Challenge              @relation(fields: [challengeId], references: [id])
  user                  User                   @relation(fields: [userId], references: [id])

  @@index([userId, challengeId, createdAt])
}

model Achievement {
  id          String            @id @db.VarChar(64)
  name        String            @db.VarChar(128)
  description String?
  icon        String?           @db.VarChar(8)
  users       UserAchievement[]
}

model UserAchievement {
  id            Int         @id @default(autoincrement())
  userId        Int
  achievementId String
  unlockedAt    DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
}

model PointLedger {
  id        Int      @id @default(autoincrement())
  userId    Int
  delta     BigInt
  reason    String   @db.VarChar(128)
  source    String   @db.VarChar(64)
  txHash    String?  @db.VarChar(128)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId, createdAt])
}

model ContractConfig {
  id           Int      @id @default(autoincrement())
  networkName  String   @db.VarChar(64)
  chainId      Int
  rpcUrl       String
  pointsToken  String?  @db.VarChar(66)
  questAddress String?  @db.VarChar(66)
  paused       Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Education {
  id            Int             @id @default(autoincrement())
  title         String          @db.VarChar(128)
  duration      Int?
  points        Int?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  description   String?         @db.VarChar(256)
  UserEducation UserEducation[]
}

model UserEducation {
  id          Int       @id @default(autoincrement())
  userId      Int
  educationId Int
  completedAt DateTime  @default(now())
  education   Education @relation(fields: [educationId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@unique([userId, educationId])
}

enum AttemptStatus {
  PENDING
  APPROVED
  REJECTED
  CLAIMED
}
